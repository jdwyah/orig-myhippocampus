<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<!-- Turn on HostPrecedingPropertyPlaceholderConfigurer -->
	<!-- http://jdwyah.blogspot.com/2006/12/updated-spring-configuration.html -->
	<bean id="propertyConfigurer" class="com.aavu.server.util.HostPrecedingPropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config.properties" />
	</bean>

	<!-- Turn on @Required -->
	<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />


<!-- Theory was to wrap all these calls to change the way we do our try/catch & logging but I forgot that Spring AOP can only really catch calls to exernal public methods, in this case handleRequest -->

	<aop:config>
      <aop:aspect ref="GWTDebugAdvice">
         <aop:pointcut id="gwtCalls"
                    expression="execution(* com.aavu.server.util.gwt.GWTSpringControllerReplacement.handleRequest(..))"/>
         <aop:around pointcut-ref="gwtCalls"
                  method="wrapGWT"/>
      </aop:aspect>
   </aop:config>
	<bean id="GWTDebugAdvice" class="com.aavu.server.service.gwt.GWTDebugAdvice"/> 
	
	<bean id="GWTTopicService" class="com.aavu.server.service.gwt.GWTTopicServiceImpl">
		<property name="topicService" ref="topicService" />
		<property name="searchService" ref="searchService" />
		<property name="serializeEverything" value="${HOST.gwt.serializeEverything}"/>
	</bean>

	<bean id="GWTUserService" class="com.aavu.server.service.gwt.GWTUserServiceImpl">
		<property name="userService" ref="userService" />
		<property name="serializeEverything" value="${HOST.gwt.serializeEverything}"/>
	</bean>

	<bean id="GWTSubjectService" class="com.aavu.server.service.gwt.GWTExternalServiceImpl">
		<property name="externalServicesService" ref="externalServicesService" />		
		<property name="deliciousService" ref="deliciousService"/>
		<property name="serializeEverything" value="${HOST.gwt.serializeEverything}"/>
	</bean>

	<bean id="facebookService" class="com.aavu.server.service.facebook.impl.FacebookServiceImpl"></bean>

	<bean id="userService" class="com.aavu.server.service.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />		
		<property name="userCache" ref="userCache"/>
		<property name="messageSource" ref="messageSource" />
		<property name="maxUsers" value="200" />
		<property name="startingInvitations" value="2" />	
		<property name="saltSource" ref="userSaltSource"/>
		<property name="passwordEncoder" ref="passwordEncoder"/>	
	</bean>
	<bean id="topicService" class="com.aavu.server.service.impl.TopicServiceImpl">
		<property name="selectDAO" ref="selectDAO" />
		<property name="editDAO" ref="editDAO"></property>		
	</bean>
	<bean id="browseService" class="com.aavu.server.service.impl.BrowseServiceImpl">
		<property name="browseDAO" ref="browseDAO" />
		<property name="userService" ref="userService"/>
	</bean>
	<bean id="searchService" class="com.aavu.server.service.impl.SearchServiceImpl">
		<property name="compass" ref="compass" />
		<property name="compassGPS" ref="compassGPS"></property>
		<property name="mirrorGPS" ref="hibernateGpsDevice" />
		<property name="selectDAO" ref="selectDAO"></property>
		<property name="userService" ref="userService" />
	</bean>
	<bean id="messageService" class="com.aavu.server.service.impl.MessageServiceImpl">
		<property name="userService" ref="userService" />
		<property name="editDAO" ref="editDAO" />
		<property name="selectDAO" ref="selectDAO" />
		<property name="fileService" ref="fileService" />
	</bean>
	<bean id="externalServicesService" class="com.aavu.server.service.impl.ExternalServicesServiceImpl">
		<property name="userService" ref="userService" />
		<property name="topicService" ref="topicService" />
		<property name="restUserAgent" value="MyHippocampus.com Server" />
	</bean>
	<bean id="deliciousService" class="com.aavu.server.service.impl.DeliciousServiceImpl">
		<constructor-arg value="MyHippocampus-Server-1.0" />
		<constructor-arg value="api.del.icio.us" />
		<constructor-arg value="2000"/>

		<property name="userService" ref="userService" />
		<property name="topicService" ref="topicService" />
	</bean>

	<bean id="googleService" class="com.aavu.server.service.impl.GoogleServicesImpl">
		<constructor-arg value="MyHippocampus-Server-1.0" />
		<constructor-arg value="Google Docs &amp; Spreadsheets" />
		
		<property name="docListURL" value="http://docs.google.com/feeds/documents/private/full"/>
		<property name="authScopeURL" value="http://docs.google.com/feeds/documents"/>
		<property name="selectDAO" ref="selectDAO"/>
		<property name="userService" ref="userService" />
		<property name="topicService" ref="topicService" />
	</bean>

	<bean id="awsConnection" class="com.aavu.server.s3.com.amazon.s3.AWSAuthConnection">
		<property name="awsAccessKeyId" value="${aws.s3.auth}" />
		<property name="awsSecretAccessKey" value="${aws.s3.secret}" />
		<property name="defaultBucket" value="myhippocampus" />
	</bean>

	<bean id="fileService" class="com.aavu.server.service.impl.FilePersistanceServiceImpl">
		<property name="awsConnection" ref="awsConnection" />
		<property name="editDAO" ref="editDAO" />
	</bean>


	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" abstract="false"
		scope="singleton" lazy-init="default" autowire="default" dependency-check="default">
		<property name="basename" value="messages" />
	</bean>

	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer" abstract="false"
		scope="singleton" lazy-init="default" autowire="default" dependency-check="default">
		<property name="templateLoaderPath">
			<value>/</value>
		</property>
		<property name="freemarkerSettings">
			<props>
				<prop key="datetime_format">MM/dd/yyyy</prop>
				<prop key="number_format">0.#####</prop>
				<prop key="url_escaping_charset">ISO-8859-1</prop>
			</props>
		</property>
	</bean>
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="k2smtpout.secureserver.net" /><!-- http://help.godaddy.com/article.php?article_id=122&topic_id=120 -->
	</bean>
	<bean id="invitationService" class="com.aavu.server.service.impl.InvitationServiceImpl">
		<property name="mailingListDAO" ref="mailingListDAO"></property>
		<property name="configurer" ref="freemarkerConfig"></property>
		<property name="from" value="subscriptions@myhippocampus.com"></property>
		<property name="invitationTemplate" value="/WEB-INF/freemarker/mail/invitation.ftl"></property>
		<property name="mailSender" ref="mailSender"></property>
		<property name="userService" ref="userService" />
		<property name="masterkey" value="MonsterSeahorse"></property>
	</bean>

	<tx:annotation-driven transaction-manager="txManager"/>

</beans>