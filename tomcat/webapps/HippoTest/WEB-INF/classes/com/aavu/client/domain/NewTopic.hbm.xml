<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.aavu.client.domain">

	<class name="Topic" table="Topics" discriminator-value="Topic">
		<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractTopic</meta>
		<meta attribute="scope-class">public abstract</meta>

		<id name="id" type="long" column="topic_id" unsaved-value="0">
			<generator class="native"></generator>
		</id>

		<discriminator column="discriminator" type="string"></discriminator>

		<many-to-one name="user" class="User" column="user_id" />

		<property name="title" type="string" column="title">
			<meta attribute="use-in-equals">true</meta>
			<meta attribute="field-description">The title of this entry</meta>
		</property>
		
		<property name="latitude" type="int" column="latitude" not-null="true">
			<meta attribute="field-description">The latitude</meta>
		</property>
		<property name="longitude" type="int" column="longitude" not-null="true">
			<meta attribute="field-description">The longitude</meta>
		</property>

	 	<!--<property name="data" type="string">
			<meta attribute="use-in-equals">true</meta>
			<meta attribute="field-description">The optional data element</meta>
			<column name="data" sql-type="text"></column>
		</property>-->

		<property name="lastUpdated" type="java.util.Date">
			<meta attribute="field-description">Last updated</meta>
			<column name="dateUpdated" sql-type="timestamp" />
		</property>

		<property name="created" type="java.util.Date">
			<!-- <meta attribute="use-in-equals">true</meta>-->
			<meta attribute="field-description">Created date</meta>
			<column name="dateCreated" sql-type="timestamp" />
		</property>

	 	<property name="publicVisible" type="boolean" column="public_visible">
			<meta attribute="use-in-equals">true</meta>
			<meta attribute="field-description">Shared?</meta>
		</property>

		<set name="scopes" table="topic_scopes" >
			<key column="topic_id" />
			<many-to-many column="scope_id" class="Topic" />
		</set>
		
		<many-to-one name="subject" class="com.aavu.client.domain.subjects.Subject" cascade="save-update"></many-to-one>
		
 <!-- 
		<map name="metaValues" table="topic_meta_values">
			<key column="topic_meta_value_id"></key>

			<map-key-many-to-many column="meta_id" class="Topic"></map-key-many-to-many>
			<many-to-many column="metaValue_id" class="Topic"></many-to-many>
						
	    </map>-->

 		<set name="instances" table="instancetable" cascade="none">
			<key column="from_id" />
			<many-to-many column="topic_id" class="Topic" />
		</set>
		<set name="types" table="typetable" cascade="none">
			<key column="from_id" />
			<many-to-many column="topic_id" class="Topic" />
		</set>
		
		<!-- This owes an explanation. Basically it's a dupe of the Types mapping
  			 above, but it also maps the latitude & longitude columns of that mapping.
  			 Melding everything into the above mapping was another option, but this 
  			 was easier. Currently only using this mapping in the getTopicsWithTag() call. 
  			 TODO how bad is this?-->		
		<set name="typesWithLocation" table="typetable">
        		<key column="from_id"/>
		        <composite-element class="com.aavu.client.domain.TopicWithLocation">
		            <property column="latitude" name="latitude"/>
        		    <property column="longitude" name="longitude"/>
					<many-to-one name="topic" class="Topic" />
		        </composite-element>
	    </set>
		
<!-- 
		<set name="metas" table="topic_meta">
			<key column="meta_id" />
			<many-to-many column="topic_id" class="Topic" />
		</set>-->
		
		<set name="occurences" table="topic_occurences" cascade="save-update">
			<key column="occurrence_id"></key>
			<many-to-many column="topic_id" class="Occurrence" />
		</set>

	    <set name="associations" table="topic_associations">
			<key column="association_id"></key>			
			<many-to-many column="topic_id" class="Association" />
		</set>

		<!-- meaningless from DB perspective. only usefull for differentiation -->
		<subclass name="Tag" discriminator-value="tag">
			<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
		</subclass>
		
			
		<!-- meaningless from DB perspective. only usefull for differentiation -->
		<subclass name="HippoDate" discriminator-value="date">
			<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
		</subclass>
		<!-- meaningless from DB perspective. only usefull for differentiation -->
		<subclass name="HippoText" discriminator-value="text">
			<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
		</subclass>

		<!-- also meaningless from DB -->
		<subclass name="Meta" discriminator-value="meta">
			<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
		
			<subclass name="MetaDate" discriminator-value="metadate">
				<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
			</subclass>
			<subclass name="MetaTopic" discriminator-value="metatopic">
				<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
			</subclass>
			<subclass name="MetaText" discriminator-value="metatext">
				<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
			</subclass>
			<subclass name="MetaSeeAlso" discriminator-value="seealso">
				<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
			</subclass>

		</subclass>
		
		<!-- a real class has members -->
		<subclass name="Association" discriminator-value="association">
			<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractAssociation</meta>

			<!-- what about doing just binary associations with two many-to-man? -->			
	<!-- 		<map name="members" table="member_topics">
				<key column="member_topics_id"></key>
				 <map-key column="role" type="string"></map-key>-->
				<!-- the map-key-many-to-many was cool, but tough to image a use case. -->
				<!-- it was either "PARENT" "CHILD" or for a seealso set, we'll use "1" "2" "3" and won't even look at em -->
				<!-- <map-key-many-to-many column="role_topic" class="Topic" ></map-key-many-to-many>-->
<!-- 				<many-to-many column="implementing_topic" class="Topic"></many-to-many>						
	    	</map>-->
	      	<set name="members" table="member_topics">
				<key column="member_topics_id"></key>			
				<many-to-many column="member_id" class="Topic" />
  			</set>

			<subclass name="ParentChild" discriminator-value="parentChild">
				<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractJUNK</meta>
			</subclass>

			

		</subclass>
	</class>
	
	
	
<!-- 
	<class name="Occurrence" table="Occurrence">
		<meta attribute="generated-class">com.aavu.client.domain.generated.AbstractOccurrence</meta>
		<meta attribute="scope-class">public abstract</meta>
		<id name="id" type="long" column="occurrence_id">
			<generator class="native"></generator>
		</id>
		<property name="isLink" type="boolean" column="isLink">
			<meta attribute="use-in-equals">true</meta>
		</property>
		<property name="value" type="string" column="value">
			<meta attribute="use-in-equals">true</meta>
		</property>
	</class>-->

<!-- 
	<class name="Link" table="Link" abstract="true">
		<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractLink</meta>
		<meta attribute="scope-class" inherit="false">public abstract</meta>

		<id name="id" type="long" column="link_id" unsaved-value="0">
			<generator class="native"></generator>
		</id>

		<discriminator column="discriminator" type="string" />

		<many-to-one name="from" class="NewTopic" column="from_id" />
		<many-to-one name="to" class="NewTopic" column="to_id" />

		<subclass name="MetaLink" discriminator-value="meta">
			<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractMetaLink</meta>
		</subclass>

		<subclass name="MetaValueLink" discriminator-value="metavalue">
			<meta attribute="generated-class" inherit="false">com.aavu.client.domain.generated.AbstractMetaValueLink</meta>
		</subclass>
	</class>-->

</hibernate-mapping>